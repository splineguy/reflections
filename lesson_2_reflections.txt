What happens when you initialize a repository? Why do you need to do it?
	A directory is created (/.git) with all the necessary information for the
	repository.  It does NOT create a commit since you would need to tell it
	what is contained in the commit and which files to include.  The information
	in the .git directory will track the necessary information for version control. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is a place to hold files that you know will be added to repository
	in the next commit.  The working directory is where you are making changes before
	you add them to the staging area.  The staging area is a place to put the finalized
	code that needs to be added to the repositiory before you commit them to the
	repository. (I'm curious if there are issues with having repositories
	nested inside other repositories.)  The staging area limits the scope of changes
	in each commit so you only make small, connected changes to the project
	at a time.

How can you use the staging area to make sure you have one commit per logical
change?

	The staging area forces me to compile only those changes that I've made
	that are related to a small, logically connected issue.  If I get too
	eager and forget to stage those changes, I can use the diff comparisons to
	isolate those changes in specific files, add only those files to the 
	staging area, commit the changes, then add the next files to the staging
	area, commit, and repeat as necessary.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches allow you to create either temporary or experimental versions of
	your code that you may or may not want to keep.  If I am testing out a 
	feature that may or may not be included I can create a branch just for that
	feature.  In my algorithmic code, I may be trying some new algorithm that
	may or may not improve the efficiency of the code and so I want to be
	able to branch my code versions in case it doesn't work.

How do the diagrams help you visualize the branch structure?

	The diagrams will help you associate commits with the changes and how 
	they related to other branches. It will also help you see when detached 
	HEAD states could lead to catastrophic losses if you aren't careful.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
